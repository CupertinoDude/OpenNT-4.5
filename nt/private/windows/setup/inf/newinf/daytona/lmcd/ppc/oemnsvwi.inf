[Identification]
    OptionType = NetService
[Options]
    WINS
[FileConstants]
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "service"
Exit_Code       = 0
WINSMsgDLL       = "%SystemRoot%\System32\winsevnt.dll"
Manufacturer            = "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion          = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductOpSupport     = 132 
ProductSoftwareName             = "Wins"
ProductSoftwareImagePath        = "%SystemRoot%\System32\wins.exe"
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
SystemService   = $(!NTN_ServiceBase)
ServiceKeyName  = $(!NTN_ServiceBase)
PerformanceKey  = $(!NTN_ServiceBase)"\Wins\Performance"
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle         = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DefaultStatusReturn = STATUS_NO_EFFECT
DriverPath      = $(!STF_NTPATH)\drivers
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    Debug-Output "OEMNSVWI.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNSVWI.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNXPNB.INF: ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        set Error = $($R0)
        set from = end
        set to = end
        goto nonfatal
    else
        set StartLabel = installadapter
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
       Goto ShellCodeError
    Else-Ifstr(i) $($R0) == STATUS_FAILED
       Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
       ifint $($ShellCode) != $(!SHELL_CODE_OK)
           goto ShellCodeError
       endif
       set Error = $($R0)
       Goto fatal
    Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
       Goto successful
    Endif
    Set SrcDir = $($R1)
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        CloseRegKey $(KeyProduct)
        Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
            $(ProductVersion)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        goto end
    endif
    StartWait
    ifstr(i) $(OldVersionExisted) == $(FALSE)
        install "Install-Option"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
        endif
        set OEM_ABANDON_ON = TRUE
        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(ProductSoftwareName),+
            $(ProductSoftwareDisplayName), +
            $(STF_CONTEXTINFNAME), $(ProductSoftwareImagePath), "serviceauto", "",+
            {"RPCSS","NTLMSSP"}, "", $(WINSMsgDLL)
        Set SoftwareProductKey = $($R1)
        Set SoftwareNetRuleKey = $($R2)
        Set SoftwareServiceKey = $($R3)
        Set KeyParameters = $($R4)
        Set SoftLinkageKey      = $($R5)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           EndWait
           Debug-Output "Registry error: add software components"
           CloseRegKey $(SoftwareProductKey)
           CloseRegKey $(SoftwareNetRuleKey)
           CloseRegKey $(SoftwareServiceKey)
           CloseRegKey $(KeyParameters)
           CloseRegKey $(SoftLinkageKey)
           goto fatalregistry
        endif
        CreateRegKey $(KeyParameters) {"Datafiles",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" DataFilesKey
        CloseRegKey $(DataFilesKey)
        CreateRegKey $(SoftwareServiceKey) {"Partners",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" PartnersKey
        CreateRegKey $(PartnersKey) {"Pull",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" PullKey
        CreateRegKey $(PartnersKey) {"Push",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" PushKey
        CloseRegKey $(PullKey)
        CloseRegKey $(PushKey)
        CloseRegKey $(PartnersKey)
        CreateRegKey $(SoftwareServiceKey) {"Performance",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" PerformanceKey
        set NewValueList = {{Library,$(NoTitle),$(!REG_VT_SZ),"winsctrs.dll"},+
                           {Open,$(NoTitle),$(!REG_VT_SZ),"OpenWinsPerformanceData"},+
                           {Collect,$(NoTitle),$(!REG_VT_SZ),"CollectWinsPerformanceData"},+
                           {Close,$(NoTitle),$(!REG_VT_SZ),"CloseWinsPerformanceData"}}
        Shell $(UtilityInf), AddValueList, $(PerformanceKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Resgitry error: add value list."
            CloseRegKey $(PerformanceKey)
            CloseRegKey $(SoftwareProductKey)
            CloseRegKey $(SoftwareNetRuleKey)
            CloseRegKey $(SoftwareServiceKey)
            CloseRegKey $(SoftLinkageKey)
            CloseRegKey $(KeyParameters)
            goto fatalregistry
        endif
        CloseRegKey $(PerformanceKey)
        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                           {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}, +
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
        Shell $(UtilityInf), AddValueList, $(SoftwareProductKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Resgitry error: add value list."
            CloseRegKey $(SoftwareProductKey)
            CloseRegKey $(SoftwareNetRuleKey)
            CloseRegKey $(SoftwareServiceKey)
            CloseRegKey $(SoftLinkageKey)
            CloseRegKey $(KeyParameters)
            goto fatalregistry
        endif
        set NewValueList = {{InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
        Shell  $(UtilityInf), AddValueList, $(SoftwareNetRuleKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Resgitry error: add value list."
            CloseRegKey $(SoftwareProductKey)
            CloseRegKey $(SoftwareNetRuleKey)
            CloseRegKey $(SoftwareServiceKey)
            CloseRegKey $(KeyParameters)
            CloseRegKey $(SoftLinkageKey)
            goto fatalregistry
        endif
        CloseRegKey $(SoftwareProductKey)
        CloseRegKey $(SoftwareNetRuleKey)
        CloseRegKey $(SoftwareServiceKey)
        CloseRegKey $(KeyParameters)
        CloseRegKey $(SoftLinkageKey)
        OpenRegKey $(!REG_H_LOCAL) "" "system\currentcontrolset\services\netbt\parameters" $(MAXIMUM_ALLOWED) KeyNetBT
        ifstr(i) $(KeyNetBT) != ""
            SetRegValue $(KeyNetBT) {EnableProxy,$(NoTitle),$(!REG_VT_DWORD),0}
            SetRegValue $(KeyNetBT) {NodeType,$(NoTitle),$(!REG_VT_DWORD),8}
            CloseRegKey $(KeyNetBT)
        endif
        Shell "oemnsvsn.inf" InstallMicrosoftAgent "WINS" "WinsMibAgent" "%SystemRoot%\System32\winsmib.dll"
    endif
    ifstr(i) $(!STF_INSTALL_TYPE) != "SETUPBOOTED"
	Shell "" AddWINS
    endif
    EndWait
    Shell $(UtilityInf) SetMasterComponent Microsoft Tcpip $(STF_CONTEXTINFNAME) WINS
    goto successful
configureadapter = +
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
        $(ProductSoftwareName)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        goto fatalregistry
    endif
    Shell "oemnsvsn.inf" RemoveMicrosoftAgent "WinsMibAgent"
    ifstr(i) $(!STF_INSTALL_TYPE) != "SETUPBOOTED"
        install "Remove-WINS-Icon"
    endif
    goto end
UpgradeSoftware = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
        SetRegValue $(KeyProduct) {SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)}
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
        SetRegValue $(KeyProduct) {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)}
        SetRegValue $(KeyProduct) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}
        install "Remove-WINS-Icon"
        install "Install-WINS-Icon"
        OpenRegKey $(!REG_H_LOCAL) "" $(PerformanceKey) $(MAXIMUM_ALLOWED) KeyPerformance
        Ifstr $(KeyPerformance) != $(KeyNull)
            SetRegValue $(KeyPerformance) {Collect,$(NoTitle),$(!REG_VT_SZ),"CollectWinsPerformanceData"}
            CloseRegKey $(KeyPerformance)
        endif
        CloseRegKey $(KeyProduct)
    endif
    goto end
successful = +
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText) 
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[GetFilesSize]
    set FileSizeList = ^(Files-WINS,3)
    set TotalSize = 0
    ForListDo $(FileSizeList)
        Split-String $($) "=" SplitString
        set Size = *($(SplitString),3)
        set-add TotalSize = $(TotalSize) $(Size)
    EndForListDo
    set-div SizeInK = $(TotalSize) 1024
    return $(SizeInK)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-WINS $(SrcDir) $(!STF_WINDOWSSYSPATH)
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    else
        LibraryProcedure STATUS,$(!NCPA_HANDLE), CopySingleFile $(!STF_HWND) $(SrcDir)\WINSADMN.EXE $(!STF_WINDOWSSYSPATH)\WINSADMN.EXE
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-WINS $(SrcDir) $(!STF_WINDOWSSYSPATH)
   exit
[Install-WINS-Icon]
    CreateCommonProgManGroup $(GroupName), ""
    RemoveCommonProgManItem $(GroupName), $(IconName)
    CreateCommonProgManItem $(GroupName), $(IconName), winsadmn.exe, winsadmn.exe, ""
    ShowCommonProgManGroup $(GroupName), 6
    exit
[Remove-WINS-Icon]
    RemoveCommonProgManItem $(OldGroupName), $(IconName)
    RemoveCommonProgManItem $(GroupName), $(IconName)
    exit
[AddWINS]
    read-syms FileConstants$(!STF_LANGUAGE)
    read-syms GeneralConstants
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\Microsoft\WINS" $(MAXIMUM_ALLOWED) ProductKey
    ifstr(i) $(ProductKey) != ""
        install "Install-WINS-Icon"
        CloseRegKey $(ProductKey)
    endif
    return
[Source Media Descriptions]
   1 = "Windows NT Server CD-ROM" , TAGFILE = cdrom_s.45
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = ppc
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
[Files-WINS]
1, WINS.EXE, SIZE=999
1, WINSADMN.CNT, SIZE=999
1, WINSADMN.EXE, SIZE=999
1, WINSADMN.HLP, SIZE=999
1, WINSCTRS.DLL, SIZE=999
1, WINSEVNT.DLL, SIZE=999
1, WINSMIB.DLL, SIZE=999
1, IPADRDLL.DLL, SIZE=999, NODELETESOURCE
1, JETPACK.EXE, SIZE=999, NODELETESOURCE
[LanguagesSupported]
    ENG
[OptionsTextENG]
    WINS     = "Windows Internet Name Service"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
FunctionTitle   = "Windows Internet Name Service Setup"
ProductSoftwareDescription      = "Dynamic name registration and resolution service that maps NetBIOS computer names to IP addresses."
ProductSoftwareDisplayName      = "Windows Internet Name Service"
ProductSoftwareTitle            = "Windows Internet Name Service"
ShellCodeErrorTitle     = "Error: "$(FunctionTitle)
ShellCodeErrorText      = "Shell Code Error."
OldGroupName    = "Network Administration"
GroupName    = "Administrative Tools"
IconName     = "WINS Manager"
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[FileDependentDlgENG]
