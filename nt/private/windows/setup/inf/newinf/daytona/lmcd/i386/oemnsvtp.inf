[Identification]
    OptionType = NetService
[Options]
    TCPPRINT
[FileConstants]
Manufacturer    = "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductOpSupport     = 132
ProductTCPPRINTName        = "TcpPrint"
ProductLPDName             = "LPDSVC"
ProductLPDImagePath        = "%SystemRoot%\System32\tcpsvcs.exe"
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\TcpPrint\CurrentVersion"
ProductLPDSVCKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\LPDSVC\CurrentVersion"
MonitorName = "LPR Port"
[GeneralConstants]
UtilityInf       = "UTILITY.INF"
subroutineinf    = "SUBROUTN.INF"
Exit_Code        = 0
BillboardVisible = 0
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
SERVICE_NO_CHANGE = 4294967295
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle         = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    Debug-Output "OEMNSVCU.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNSVCU.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        Debug-Output "Cannot configure the software."
        Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        set Error = $($R0)
        set from = end
        set to = end
        goto nonfatalinfo
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else
        set StartLabel = installadapter
        set OEM_ABANDON_SOFTWARE = {}
        set OEM_ABANDON_OPTIONS = {}
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
       Goto ShellCodeError
    Else-Ifstr(i) $($R0) == STATUS_FAILED
       Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
       ifint $($ShellCode) != $(!SHELL_CODE_OK)
           goto ShellCodeError
       endif
       set Error = $($R0)
       Goto fatal
    Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
       Goto successful
    Endif
    Set SrcDir = $($R1)
    ifstr(i) $(!NTN_InstallMode) == "install"
        Debug-Output "OEMNSVCU.INF: installadapter: installing [Install-Option]"
        install "Install-Option"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
        endif
    endif
    set OEM_ABANDON_ON  = TRUE
    StartWait
    Shell $(UtilityInf) InstallSoftwareProduct $(Manufacturer) $(ProductTCPPRINTName) $(STF_CONTEXTINFNAME)
    set VerKey = $($R1)
    set NetRuleKey = $($R2)
    Shell  $(UtilityInf), AddValueList, $(VerKey), {{Hidden,0,$(!REG_VT_DWORD),1}}
    Shell  $(UtilityInf), AddValueList, $(NetRuleKey), {{InfOption,0,$(!REG_VT_SZ),"TCPPRINT"}}
    CloseRegKey $(VerKey)
    CloseRegKey $(NetRuleKey)
    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\EventLog\Application"$(CS_EventLogLocation) $(MAXIMUM_ALLOWED) CS_KeyEventLog
    Ifstr $(CS_KeyEventLog) == $(KeyNull)
       debug-output "Cannot open eventlog key"
    else
       CreateRegKey $(CS_KeyEventLog) {"LPR Print Monitor",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" CS_KeyService
       ifstr(i) $(CS_KeyService) == ""
           OpenRegKey $(CS_KeyEventLog) "" "LPR Print Monitor" $(MAXIMUM_ALLOWED) CS_KeyService
       endif
       Ifstr $(CS_KeyService) != $(KeyNull)
           SetRegValue $(CS_KeyService) {EventMessageFile,$(NoTitle),$(!REG_VT_EXPAND_SZ),"%SystemRoot%\System32\lprmon.dll"}
           SetRegValue $(CS_KeyService) {TypesSupported,$(NoTitle),$(!REG_VT_DWORD),7}
           CloseRegKey $(CS_KeyService)
       endif
    Endif
    Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer),+
            $(ProductLPDName),+
            $(ProductLPDName),+
            $(ProductLPDDisplayName), $(STF_CONTEXTINFNAME),+
            $(ProductLPDImagePath),+
            "serviceshare",+
            "", {"Tcpip","Afd"}, "",+
            "%SystemRoot%\System32\lpdsvc.dll"
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVTP.INF: ShellCode error, add software component"
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNSVTP.INF: Registry error: add software components"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        CloseRegKey $($R4)
        CloseRegKey $($R5)
        goto fatalregistry
    endif
    Set LPDVersKeyHandle  = $($R1)
    Set LPDRulesKeyHandle = $($R2)
    Set LPDSvcKeyHandle   = $($R3)
    Set LPDParmKeyHandle  = $($R4)
    Set LPDLinkageHandle  = $($R5)
    set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),"Service"},+
                       {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                       {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                       {Review,$(NoTitle),$(!REG_VT_DWORD),1},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductLPDTitle)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductLPDDescription)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductLPDName)},+
                       {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}, +
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
    Shell  $(UtilityInf), AddValueList, $(LPDVersKeyHandle), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVTP.INF: ShellCode error, add value list"
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNXPTC.INF: Registry error: add value list."
        CloseRegKey $(LPDVersKeyHandle)
        CloseRegKey $(LPDRulesKeyHandle)
        CloseRegKey $(LPDSvcKeyHandle)
        CloseRegKey $(LPDParmKeyHandle)
        CloseRegkey $(LPDLinkageHandle)
        goto fatalregistry
    Endif
    set NewValueList = {{InfOption,$(NoTitle),$(!REG_VT_SZ),TCPPRINT},+
                        {type,$(NoTitle),$(!REG_VT_SZ),"tcppint tcpprinting"},+
                        {bindform,$(NoTitle),$(!REG_VT_SZ),{"tcpprinting nothing non non 100"}}+
                        }
    Shell  $(UtilityInf), AddValueList, $(LPDRulesKeyHandle), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVTP.INF: ShellCode error."
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    CloseRegKey $(LPDVersKeyHandle)
    CloseRegKey $(LPDRulesKeyHandle)
    set NewValueList = {{AllowJobRemoval,$(NoTitle),$(!REG_VT_DWORD),1},+
                       {AllowPrinterResume,$(NoTitle),$(!REG_VT_DWORD),1},+
                       {MaxConcurrentUsers,$(NoTitle),$(!REG_VT_DWORD),100}}
    Shell  $(UtilityInf), AddValueList, $(LPDParmKeyHandle), $(NewValueList)
    CloseRegKey $(LPDParmKeyHandle)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        CloseRegKey $(LPDLinkageHandle)
        CloseRegKey $(LPDSvcKeyHandle)
        EndWait
        Debug-Output "OEMNSVTP.INF: Registry error: add value list."
        goto fatalregistry
    endif
    CloseRegKey $(LPDLinkageHandle)
    EndWait
    Shell $(UtilityInf) SetMasterComponent Microsoft Tcpip $(STF_CONTEXTINFNAME) TCPPRINT
    goto successful
configureadapter = +
    goto end
bindingadapter =+
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\"$(Manufacturer)"\lpdsvc\CurrentVersion" $(MAXIMUM_ALLOWED) CurrentVersionKey
    DeleteRegValue $(CurrentVersionKey) "Review"
    CloseRegKey $(CurrentVersionKey)
    LoadLibrary "x" $(!STF_CWDDIR)\tcpcfg.dll !TCPCFG_HANDLE
    LibraryProcedure Result, $(!TCPCFG_HANDLE), CPlAddMonitor, $(MonitorName), "lprmon.dll"
    freeLibrary $(!TCPCFG_HANDLE)
    goto end
removeadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\"$(Manufacturer) $(MAXIMUM_ALLOWED) ProductKey
    ifstr(i) $(ProductKey) != ""
        DeleteRegTree $(ProductKey) $(ProductTCPPRINTName)
    endif
    Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), $(ProductLPDName) 
    LoadLibrary "x" $(!STF_CWDDIR)\tcpcfg.dll !TCPCFG_HANDLE
    LibraryProcedure Result, $(!TCPCFG_HANDLE), CPlDeleteMonitor, $(MonitorName)
    freeLibrary $(!TCPCFG_HANDLE)
    goto end
UpgradeSoftware = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr(i) $(KeyProduct) != $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductLPDSVCKeyName) $(MAXIMUM_ALLOWED) LPDSVCKeyProduct
        Ifstr(i) $(LPDSVCKeyProduct) != $(KeyNull)
            SetRegValue $(LPDSVCKeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
            SetRegValue $(LPDSVCKeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
            SetRegValue $(LPDSVCKeyProduct) {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductLPDDescription)}
            SetRegValue $(LPDSVCKeyProduct) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}
            CloseRegKey $(LPDSVCKeyProduct)
        endif
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
        OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\LPDSVC" $(MAXIMUM_ALLOWED) LPDKey
        Ifstr $(LPDKey) != $(KeyNull)
            SetRegValue $(LPDKey) {DisplayName,$(NoTitle),$(!REG_VT_SZ),$(ProductLPDDisplayName)}
            CloseRegKey $(LPDKey)
        endif
        OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\EventLog\Application"$(CS_EventLogLocation) $(MAXIMUM_ALLOWED) CS_KeyEventLog
        Ifstr $(CS_KeyEventLog) == $(KeyNull)
           debug-output "Cannot open eventlog key"
        else
	   DeleteRegTree $(CS_KeyEventLog) $(MonitorName)
           OpenRegKey $(CS_KeyEventLog) "" "LPR Print Monitor" $(MAXIMUM_ALLOWED) CS_KeyService
           ifstr(i) $(CS_KeyService) == ""
               CreateRegKey $(CS_KeyEventLog) {"LPR Print Monitor",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" CS_KeyService
               Ifstr $(CS_KeyService) != $(KeyNull)
                   SetRegValue $(CS_KeyService) {EventMessageFile,$(NoTitle),$(!REG_VT_EXPAND_SZ),"%SystemRoot%\System32\lprmon.dll"}
                   SetRegValue $(CS_KeyService) {TypesSupported,$(NoTitle),$(!REG_VT_DWORD),7}
                   CloseRegKey $(CS_KeyService)
               endif
           endif
           CloseRegKey $(CS_KeyService)
        Endif
        LoadLibrary "x" $(!STF_CWDDIR)\tcpcfg.dll !TCPCFG_HANDLE
        LibraryProcedure Result, $(!TCPCFG_HANDLE), CPlDeleteMonitor, "LPRMonitor"
        LibraryProcedure Result, $(!TCPCFG_HANDLE), CPlAddMonitor, $(MonitorName), "lprmon.dll"
        freeLibrary $(!TCPCFG_HANDLE)
        CloseRegKey $(KeyProduct)
    else
        goto fatalregistry
    endif
    goto end
successful = +
    goto end
infomsg =+
   read-syms InfoDlg
   ui start "Warning"
   set CommonStatus = STATUS_USERCANCEL
   goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Ifint $(BillboardVisible) != 0
        Shell "subroutn.inf" PopBillboard
        Set BillboardVisible = 0
    Endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
   goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[GetFilesSize]
    set FileSizeList = ^(Files-TCPPRINT,3)
    set TotalSize = 0
    ForListDo $(FileSizeList)
        Split-String $($) "=" SplitString
        set Size = *($(SplitString),3)
        set-add TotalSize = $(TotalSize) $(Size)
    EndForListDo
    set-div SizeInK = $(TotalSize) 1024
    return $(SizeInK)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-TCPPRINT $(SrcDir) $(!STF_WINDOWSSYSPATH)
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-TCPPRINT $(SrcDir) $(!STF_WINDOWSSYSPATH)
   Exit
[Source Media Descriptions]
   1 = "Windows NT Server CD-ROM" , TAGFILE = cdrom_s.45
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = I386
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
[Files-TCPPRINT]
1, LPDSVC.DLL, SIZE=999
1, LPQ.EXE, SIZE=999
1, LPR.EXE, SIZE=999
1, LPRHELP.DLL, SIZE=999
1, LPRMON.DLL, SIZE=999
[LanguagesSupported]
    ENG
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
ProductLPDDisplayName = "TCP/IP Print Server"
ProductLPDTitle = "Microsoft TCP/IP Printing"
ProductLPDDescription = "Enables Windows NT to print to TCP/IP-connected printers or to printers that are physically attached to UNIX computers."
[OptionsTextENG]
        TCPPRINT = "Microsoft TCP/IP Printing"
