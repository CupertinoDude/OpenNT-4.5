[Identification]
    OptionType = NetService
[Options]
    NWLNKRIP
[FileConstants]
Manufacturer    = "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
SoftwareType = "service"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductOpSupport     = 134 
ProductNWLNKRIPName  = "NwlnkRip"
ProductNWLNKRIPImagePath  = "%SystemRoot%\system32\drivers\nwlnkrip.sys"
ProductSAPName          = "SAP"
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\NwlnkRip\CurrentVersion"
ProductSAPKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\NwSapAgent"
[GeneralConstants]
UtilityInf       = "UTILITY.INF"
subroutineinf    = "SUBROUTN.INF"
Exit_Code        = 0
BillboardVisible = 0
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
SERVICE_NO_CHANGE = 4294967295
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle         = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    ifstr(i) $(!STF_PRODUCT) != WINNT
        set OptionList     = ^(Options, 1)
        set OptionTextList = ^(OptionsText$($0), 1)
    endif
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set InstallFrom = $($6)
    ifstr(i) $(InstallFrom) == ""
        set InstallFrom = "NWLNKRIP"
    endif
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set StartLabel = configureadapter
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else
        set StartLabel = installadapter
        set OEM_ABANDON_SOFTWARE = {}
        set OEM_ABANDON_OPTIONS = {}
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    set OEM_ABANDON_ON  = TRUE
    StartWait
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeySoftware
    Ifstr(i) $(KeySoftware) == $(KeyNull)
        ifstr(i) $(!NTN_InstallMode) == "install"
            Ifstr(i) $(DoCopy) == "YES"
                Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
                Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   Goto ShellCodeError
                Else-Ifstr(i) $($R0) == STATUS_FAILED
                   Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
                   ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                   endif
                   set Error = $($R0)
                   Goto fatal
                Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                   Goto successful
                Endif
                Set SrcDir = $($R1)
            Endif
            set NwlnkName = "NWLINKIPX"
            OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\NWLINKIPX" $(MAXIMUM_ALLOWED) BS_KeyServices
            Ifstr $(BS_KeyServices) == $(KeyNull)
                set NwlnkName = "NWLNKIPX"
                OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\NWLNKIPX" $(MAXIMUM_ALLOWED) BS_KeyServices
                Ifstr $(BS_KeyServices) == $(KeyNull)
                    Shell "oemnxpip.inf" ReturnOptions $(!STF_LANGUAGE)
                    ifstr(i) $($R0) == STATUS_SUCCESSFUL
                        set OldStfSrcDir = $(!STF_SRCDIR_OVERRIDE)
                        set !STF_SRCDIR_OVERRIDE = ""
                        set NwlnkName = *($($R1),1)
                        Shell "oemnxpip.inf" InstallOption $(!STF_LANGUAGE), *($($R1),1),+
                            $(SrcDir), $(AddCopy), "NO", $(DoConfig)
                        set !STF_SRCDIR_OVERRIDE = $(OldStfSrcDir)
                    else
                        Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(InstallNWLINKFirst)
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                            goto ShellCodeError
                        endif
                        goto end
                    endif
                else
                    CloseRegKey $(BS_KeyServices)
                endif
            else
                CloseRegKey $(BS_KeyServices)
            endif
            Debug-Output "OEMNSVRR.INF: installadapter: installing [Install-Option]"
            install "Install-Option"
            ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
               Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   goto ShellCodeError
               endif
               set Error = $($R0)
               goto fatal
            endif
        endif
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\NWLNKRIP" $(MAXIMUM_ALLOWED) KeyService
        Ifstr(i) $(KeyService) == $(KeyNull)
            Shell $(UtilityInf), AddSoftwareComponent, "Microsoft", +
                $(ProductNWLNKRIPName), +
                $(ProductNWLNKRIPName), +
                $(ProductNWLNKRIPDisplayName), +
                $(STF_CONTEXTINFNAME),+
                $(ProductNWLNKRIPImagePath), +
                "kernelautostart" , "", {"NWLNKIPX"}, ""
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "OEMNSVRR.INF: ShellCode error"
                return STATUS_FAILED
            endif
            set RegistryErrorIndex = $($R0)
            set ProductKey = $($R1)
            set RuleKey = $($R2)
            CloseRegKey $($R3)
            set ParamKey = $($R4)
            CloseRegKey $($R5)
            Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
                EndWait
                Debug-Output "OEMNSVRR.INF: Registry Error "$(RegistryErrorIndex)
                CloseRegKey $($R1)
                CloseRegKey $($R2)
                CloseRegKey $($R4)
                goto fatalregistry
            endif
            set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                               {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                               {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductNWLNKRIPTitle)},+
                               {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductNWLNKRIPDescription)},+
                               {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                               {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}, +
                               {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
            Shell  $(UtilityInf), AddValueList, $(ProductKey), $(NewValueList)
            CloseRegKey $(ProductKey)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "utility.INF: ShellCode error. Cannot add NWLNKRIP router service"
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "OEMNSVRR.INF:  error: create service"
                set Status = STATUS_FAILED
            endif
            set NewValueList = {{InfOption,$(NoTitle),$(!REG_VT_SZ),"NWLNKRIP"}}
            Shell  $(UtilityInf), AddValueList, $(RuleKey), $(NewValueList)
            CloseRegKey $(RuleKey)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "utility.INF: ShellCode error. Cannot add NWLNKRIP service"
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "OEMNSVRR.INF: Registry error: create service"
                set Status = STATUS_FAILED
            endif
            SetRegValue $(ParamKey) {NetbiosRouting, $(NoTitle), $(!REG_VT_DWORD), 0}
            SetRegValue $(ParamKey) {EnableLanRouting, $(NoTitle), $(!REG_VT_DWORD), 1}
            CloseRegKey $(ParamKey)
        else
            OpenRegKey $(KeyService) "" "Parameters\UseRef" $(MAXIMUM_ALLOWED) KeyUseRef
            Ifstr(i) $(KeyUseRef) != $(KeyNull)
                 SetRegValue $(KeyUseRef) {$(InstallFrom) , 0, $(!REG_VT_SZ), "1"}
                 CloseRegKey $(KeyUseRef)
            Endif
            OpenRegKey $(KeyService) "" "Parameters" $(MAXIMUM_ALLOWED) KeyParam
            Ifstr(i) $(KeyParam) != $(KeyNull)
                GetRegValue $(KeyParam),"NetbiosRouting", NetbiosRoutingInfo
                Ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                   SetRegValue $(KeyParam) {NetbiosRouting, $(NoTitle), $(!REG_VT_DWORD), 0}
                endif
                GetRegValue $(KeyParam),"EnableLanRouting", EnableLanRoutingInfo
                Ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                   SetRegValue $(ParamKey) {EnableLanRouting, $(NoTitle), $(!REG_VT_DWORD), 1}
                endif
                CloseRegKey $(KeyParam)
            endif
            CloseRegKey $(KeyService)
            Shell $(UtilityInf), InstallSoftwareProduct, $(Manufacturer), $(ProductNWLNKRIPName), $(STF_CONTEXTINFNAME)
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) == NO_ERROR
                set KeyVersion  = $($R1)
                set KeyRules    = $($R2)
                set NewValueList = {{MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                                   {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductNWLNKRIPTitle)},+
                                   {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductNWLNKRIPDescription)},+
                                   {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                                   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
                Shell  $(UtilityInf), AddValueList, $(KeyVersion), $(NewValueList)
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    Debug-Output "utility.INF: ShellCode error. Cannot add NWLNKRIP router service"
                    goto ShellCodeError
                endif
                set RegistryErrorIndex = $($R0)
                Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                    EndWait
                    Debug-Output "OEMNSVRR.INF:  error: Add values to version key"
                    set Status = STATUS_FAILED
                endif
                set NewValueList = {{InfOption,$(NoTitle),$(!REG_VT_SZ),"NWLNKRIP"}}
                Shell  $(UtilityInf), AddValueList, $(KeyRules), $(NewValueList)
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    Debug-Output "utility.INF: ShellCode error. Cannot add NWLNKRIP netrule value"
                    goto ShellCodeError
                endif
                set RegistryErrorIndex = $($R0)
                Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                    EndWait
                    Debug-Output "OEMNSVRR.INF: Registry error: Add netrule"
                    set Status = STATUS_FAILED
                endif
                Shell $(UtilityInf), LinkToService, $(KeyVersion), "NWLNKRIP", service
                set RegistryErrorIndex = $($R0)
                Ifstr(i) $(RegistryErrorIndex) == NO_ERROR
                    GetRegValue $(KeyVersion),"RefCount", RefCountInfo
                    Ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                        SetRegValue $(KeyVersion) {RefCount,$(NoTitle),$(!REG_VT_DWORD),0}
                    endif
                    Shell "" AddNWLNKRIPUsed "RAS"
                endif
                ifstr $(KeyVersion) != $(KeyNull)
                    CloseRegKey $(KeyVersion)
                endif
                ifstr $(KeyRules) != $(KeyNull)
                    CloseRegKey $(KeyRules)
                endif
            endif
        endif
    Else
        GetRegValue $(KeySoftware) "MajorVersion" VersionInfo
        set VersionMajor = *($(VersionInfo), 4)
        GetRegValue $(KeySoftware) "MinorVersion" VersionInfo
        set VersionMinor = *($(VersionInfo), 4)
        set InstalledVersion = $(VersionMajor)"."$(VersionMinor)
        ifstr(i) $(InstallFrom) == "NWLNKRIP"
            read-syms VerExists$(!STF_LANGUAGE)
            set Text = $(Product$(Option)Title)$(Ver)$(ProductVersion)+
                       $(Text1)
            Shell $(subroutineinf), SetupMessage $(!STF_LANGUAGE) "NONFATAL" $(Text)
            Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Goto fatal
            Else-Ifstr(i) $($R0) == STATUS_FAILED
                Goto fatal
            Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                Goto end
            Endif
        else
            Shell "" AddNWLNKRIPUsed $(InstallFrom)
        endif
        goto end
    EndIf
    Ifstr(i) $(KeySoftware) != $(KeyNull)
        CloseRegKey $(KeySoftware)
    endif
    Shell "" AddNWLNKRIPUsed $(InstallFrom)
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductSAPKeyName) $(MAXIMUM_ALLOWED) SAPKeyProduct
    ifstr(i) $(SAPKeyProduct) == ""
        set !STF_SRCDIR_OVERRIDE = $(SrcDir)
        Shell "oemnsvsa.inf" InstallOption $(!STF_LANGUAGE) "SAP"  +
          $(SrcDir) $(AddCopy) $(DoCopy) $(DoConfig) "NWLNKRIP"
    endif
    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\NwLnkIpx\Parameters" $(MAXIMUM_ALLOWED) KeyIpx
    IfStr(i) $(KeyIpx) != ""
        GetRegValue $(KeyIpx), "RipTableSize", RipTableInfo
        Ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
           SetRegValue $(KeyIpx) {RipTableSize, $(NoTitle), $(!REG_VT_DWORD), 255}
        endif
        CloseRegKey $(KeyIpx)
    EndIf
    EndWait
    goto configureadapter
configureadapter = +
    ifstr(i) $(!NTN_InstallMode) == configure
        set CommonStatus = STATUS_NO_EFFECT
    endif
    Debug-Output "OEMNSVRR.INF: !STF_UNATTENDED = "$(!STF_UNATTENDED)
    set Unattended = NO
    ifstr(i) $(!STF_UNATTENDED) == "YES"
        set Unattended = "YES"
    else-ifstr(i) $(!STF_UNATTENDED) != ""
        set Unattended = "YES"
    else-ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
        set Unattended = "YES"
    endif
    ifstr(i) $(Unattended) == NO
        set NetbiosRouting = 0
        set ServiceName = $(!NTN_ServiceBase)"\NWLNKRIP\Parameters"
        OpenRegKey $(!REG_H_LOCAL) "" $(ServiceName) $(MAXIMUM_ALLOWED) KeyParam
        Ifstr(i) $(KeyParam) != $(KeyNull)
            GetRegValue $(KeyParam),"NetbiosRouting", NetbiosRoutingInfo
            Ifint $(RegLastError) == $(!REG_ERROR_SUCCESS)
               set NetbiosRouting = *($(NetbiosRoutingInfo), 4)
            else
               SetRegValue $(KeyParam) {NetbiosRouting, $(NoTitle), $(!REG_VT_DWORD), 0}
            endif
        else
            read-syms ConfigErrorTxt$(!STF_LANGUAGE)
            shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) WARNING $(Error)
            ifstr(i) $($R0) != STATUS_SUCCESSFUL
                goto ShellCodeError
            endif
            goto end
        endif
        read-syms EnableNetbiosRoutingDlg$(!STF_LANGUAGE)
        ifint $(NetbiosRouting) == 0
            set STF_MB_TEXT = $(Disabled)
        else-ifint $(NetbiosRouting) == 2
            set STF_MB_TEXT = $(Disabled)
        else
            set STF_MB_TEXT = $(Enabled)
        endif
        ui start "EnableNetbiosDlg"
        ifstr(i) $(DLGEVENT) == "YES"
            ifint $(NetbiosRouting) == 0
               set NetbiosRouting = 1
            else-ifint $(NetbiosRouting) == 1
               set NetbiosRouting = 0
            else-ifint $(NetbiosRouting) == 2
               set NetbiosRouting = 3
            else-ifint $(NetbiosRouting) == 3
               set NetbiosRouting = 2
            endif
            ifstr(i) $(KeyParam) != $(KeyNull)
                SetRegValue $(KeyParam) {NetbiosRouting, $(NoTitle), $(!REG_VT_DWORD), $(NetbiosRouting)}
                CloseRegKey $(KeyParam)
                set CommonStatus = STATUS_SUCCESSFUL
            endif
        endif
    endif
    goto end
bindingadapter =+
    goto end
removeadapter = +
    set NwlnkRipKeyName = "System\CurrentControlSet\Services\NwlnkRip"
    set ProductNWLNKRIPName  = "NwlnkRip"
    Shell "" RemoveNWLNKRIPUsed $(InstallFrom)
    OpenRegKey $(!REG_H_LOCAL) "" $(NwlnkRipKeyName) $(MAXIMUM_ALLOWED) BS_KeyServices
    Ifstr $(BS_KeyServices) != $(KeyNull)
        CloseRegKey $(BS_KeyServices)
        Shell "" NumOfUsed
        set NumOfUsed = $($R0)
        ifint $(NumOfUsed) == 1
            Shell "" FindUsed "RAS"
            set RasUsing = $($R0)
            ifstr(i) $(RasUsing) == TRUE
                Shell "oemnsvra.inf" CheckRasInstalled
                set RasInstalled = $($R0)
                ifstr(i) $(RasInstalled) == FALSE
                    Debug-Output "OEMNSVRR.INF: The only consumer RAS is not installed, so removing NWLNKRIP service"
                    set NumOfUsed = 0
                endif
            endif
            Shell "" FindUsed "NWLNKRIP"
            ifstr(i) $($R0) == TRUE
                set NumOfUsed = 0
            endif
        endif
        ifint $(NumOfUsed) == 0
            Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), $(ProductNWLNKRIPName)
            OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\NwLnkIpx\Parameters" $(MAXIMUM_ALLOWED) KeyIpx
            IfStr(i) $(KeyIpx) != ""
                GetRegValue $(KeyIpx), "RipTableSize", RipTableInfo
                Ifint $(RegLastError) == $(!REG_ERROR_SUCCESS)
                   set RipTableSizeValue = *($(RipTableInfo), 4)
                   ifint $(RipTableSizeValue) == 255
                       DeleteRegValue $(KeyIpx) "RipTableSize"
                   endif
                endif
                CloseRegKey $(KeyIpx)
            EndIf
        else
            ifstr(i) $(InstallFrom) == "NWLNKRIP"
                read-syms InUse$(!STF_LANGUAGE)
                set from = end
                set to = end
                goto warning
            endif
        endif
    endif
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductSAPKeyName) $(MAXIMUM_ALLOWED) SAPKeyProduct
    ifstr(i) $(SAPKeyProduct) != ""
        set OldInstallMode = $(!NTN_InstallMode)
        set !NTN_InstallMode = deinstall
        Shell "oemnsvsa.inf" InstallOption $(!STF_LANGUAGE) "SAP"  +
            $(SrcDir) $(AddCopy) $(DoCopy) $(DoConfig) "NWLNKRIP"
        set !NTN_InstallMode = $(OldInstallMode)
    endif
    goto end
UpgradeSoftware = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr(i) $(KeyProduct) != $(KeyNull)
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
        OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\NwLnkIpx\Parameters" $(MAXIMUM_ALLOWED) KeyIpx
        IfStr(i) $(KeyIpx) != ""
            GetRegValue $(KeyIpx), "RipTableSize", RipTableInfo
            Ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
               SetRegValue $(KeyIpx) {RipTableSize, $(NoTitle), $(!REG_VT_DWORD), 255}
            endif
            CloseRegKey $(KeyIpx)
        EndIf
        SetRegValue $(KeyProduct) {SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)}
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
        SetRegValue $(KeyProduct) {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductNWLNKRIPDescription)}
        SetRegValue $(KeyProduct) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}
        CloseRegKey $(KeyProduct)
    endif
    goto end
successful = +
    goto end
infomsg =+
   read-syms InfoDlg
   ui start "Warning"
   set CommonStatus = STATUS_USERCANCEL
   goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "STATUS", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Ifint $(BillboardVisible) != 0
        Shell "subroutn.inf" PopBillboard
        Set BillboardVisible = 0
    Endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
   goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[Install-Option]
    set STF_VITAL = "NO"
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-NWLNKRIP $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = "NO"
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-NWLNKRIP $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   Exit
[AddNWLNKRIPUsed]
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms FileConstants$(!STF_LANGUAGE)
    set KeyName = $($0)
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyService
    ifstr(i) $(KeyService) != ""
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName)"\UseRef" $(MAXIMUM_ALLOWED) KeyUseRef
        ifstr(i) $(KeyUseRef) == ""
            CreateRegKey $(KeyService) {"UseRef",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" KeyUseRef
        endif
        ifstr(i) $(KeyUseRef) != ""
            SetRegValue $(KeyUseRef) {$(KeyName),$(NoTitle),$(!REG_VT_SZ),"1"}
            CloseRegKey $(KeyUseRef)
        endif
        CloseRegKey $(KeyService)
    else
    endif
    return
[RemoveNWLNKRIPUsed]
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms FileConstants$(!STF_LANGUAGE)
    set KeyName = $($0)
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyService
    ifstr(i) $(KeyService) != ""
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName)"\UseRef" $(MAXIMUM_ALLOWED) KeyUseRef
        ifstr(i) $(KeyUseRef) == ""
            CreateRegKey $(KeyService) {"UseRef",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" KeyUseRef
        endif
        ifstr(i) $(KeyUseRef) != ""
            DeleteRegValue $(KeyUseRef) $(KeyName)
            CloseRegKey $(KeyUseRef)
        endif
        CloseRegKey $(KeyService)
    else
    endif
    return
[NumOfUsed]
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms FileConstants$(!STF_LANGUAGE)
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyService
    ifstr(i) $(KeyService) != ""
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName)"\UseRef" $(MAXIMUM_ALLOWED) KeyUseRef
        ifstr(i) $(KeyUseRef) == ""
            CreateRegKey $(KeyService) {"UseRef",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" KeyUseRef
        endif
        ifstr(i) $(KeyUseRef) != ""
            EnumRegValue $(KeyUseRef) UsageList
            set Num = 0
            ForListDo $(UsageList)
                set-add Num = $(Num), 1
            EndForListDo
            CloseRegKey $(KeyUseRef)
        endif
        CloseRegKey $(KeyService)
    else
    endif
    return $(Num)
[FindUsed]
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms FileConstants$(!STF_LANGUAGE)
    set KeyName = $($0)
    set Find = FALSE
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyService
    ifstr(i) $(KeyService) != ""
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName)"\UseRef" $(MAXIMUM_ALLOWED) KeyUseRef
        ifstr(i) $(KeyUseRef) == ""
            CreateRegKey $(KeyService) {"UseRef",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" KeyUseRef
        endif
        ifstr(i) $(KeyUseRef) != ""
            GetRegValue $(KeyUseRef),$(KeyName), KeyInfo
            ifstr(i) $(RegLastError) == $(!REG_ERROR_SUCCESS)
                set Find = TRUE
            endif
            CloseRegKey $(KeyUseRef)
        endif
        CloseRegKey $(KeyService)
    else
    endif
    return $(Find)
[Source Media Descriptions]
   1 = "Windows NT Server CD-ROM" , TAGFILE = cdrom_s.45
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = ppc
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
[Files-NWLNKRIP]
1,NWLNKRIP.SYS , SIZE=999
[LanguagesSupported]
    ENG
[OptionsTextENG]
    NWLNKRIP = "RIP for NwLink IPX/SPX compatible transport"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
ProductNWLNKRIPTitle       = "RIP for NWLink IPX"
ProductNWLNKRIPDescription = "RIP for NWLink IPX"
ProductNWLNKRIPDisplayName = "RIP for NWLink IPX"
[VerExistsENG]
    Ver   = " version "
    Text1 = " is already installed. "
[InUseENG]
Error = "RIP for NWLink IPX is currently in use by other network protocols. Please remove all related services first."
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[EnableNetbiosRoutingDlgENG]
DlgType = "MessageBox"
STF_MB_TITLE = "RIP for NWLink IPX Configuration"
STF_MB_TYPE  = 3
STF_MB_ICON  = 2
STF_MB_DEF   = 2
Enabled  = "NetBIOS Broadcast Propagation (broadcast of type 20 packets) is currently enabled. "$(!LF)+
           "If any Microsoft Windows clients use NwLink IPX to connect to this server, you must "+
           "enable this option to allow NwLink IPX to function correctly."$(!LF)+
           "Enable this option only if you understand the routing implications because it might "+
           "affect your network performance."$(!LF)$(!LF)+
           "Do you want to disable NetBIOS Broadcast Propagation?"
Disabled = "NetBIOS Broadcast Propagation (broadcast of type 20 packets) is currently disabled. "$(!LF)+
           "If any Microsoft Windows clients use NwLink IPX to connect to this server, you must "+
           "enable this option to allow NwLink IPX to function correctly."$(!LF)+
           "Enable this option only if you understand the routing implications because it might "+
           "affect your network performance."$(!LF)$(!LF)+
           "Do you want to enable NetBIOS Broadcast Propagation?"
[ConfigErrorTxtENG]
Error = "Could not open the NWLNKRIP\Parameters registry key."
