[Identification]
    OptionType = NetAdapter
[PlatformsSupported]
    ISA
    EISA
    "Jazz-Internal Bus"
    PCI
[Options]
    DC21040
    DC21041
    DC21140
    DC21142
    DE434
    DE435
    MULTIA
    DE425
    DE450
    DE500
[FileConstants]
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
Manufacturer    = "DigitalEquipmentCorporation"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
VendorID = 4113  
ProductSoftwareName     = "DC21X4"
ProductSoftwareTitle    = "DEC DC21X4 Adapter Driver"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\DC21X4.sys"
NetRuleSoftwareType     = "DC21X4Sys ndisDriver DC21X4Driver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """DC21X4Sys"" yes no container"
NetRuleSoftwareClass    = {"DC21X4Driver basic"}
NetRuleSoftwareSWBindable = {"DC21X4Driver DC21040Adapter non exclusive 100",+
                             "DC21X4Driver DC21041Adapter non exclusive 100",+
                             "DC21X4Driver DC21140Adapter non exclusive 100",+
                             "DC21X4Driver DC21142Adapter non exclusive 100",+
                             "DC21X4Driver MULTIAAdapter non exclusive 100",+
                             "DC21X4Driver DE434Adapter non exclusive 100",+
                             "DC21X4Driver DE435Adapter non exclusive 100",+
                             "DC21X4Driver DE425Adapter non exclusive 100", +
                             "DC21X4Driver DE450Adapter non exclusive 100", +
                             "DC21X4Driver DE500Adapter non exclusive 100" }
OptionHelpFile = "DC21X4.hlp"
ProductHardwareName = "DC21X4"
NetRuleHardwareDC21040Type  = "DC21040 DC21040Adapter"
NetRuleHardwareDC21040Class = {"DC21040Adapter basic"}
ProductOpSupport     = 134 
ProductDE425OpSupport     = 132 
AdapterDC21040Type = 5  
HelpDC21040Id = 10
DC21040CFID = 135185    
NetRuleHardwareDC21041Type  = "DC21041 DC21041Adapter"
NetRuleHardwareDC21041Class = {"DC21041Adapter basic"}
AdapterDC21041Type = 5  
HelpDC21041Id = 20
DC21041CFID = 1314833    
NetRuleHardwareDC21140Type  = "DC21140 DC21140Adapter"
NetRuleHardwareDC21140Class = {"DC21140Adapter basic"}
AdapterDC21140Type = 5   
HelpDC21140Id = 30
DC21140CFID = 593937     
StoreAndForward = 0      
TxmThreshold100 = 512    
NetRuleHardwareDC21142Type  = "DC21142 DC21142Adapter"
NetRuleHardwareDC21142Class = {"DC21142Adapter basic"}
AdapterDC21142Type = 5   
HelpDC21142Id = 40
DC21142CFID = 1642513   
NetRuleHardwareDE434Type    = "DE434 DE434Adapter"
NetRuleHardwareDE434Class   = {"DE434Adapter basic"}
AdapterDE434Type   = 5  
HelpDE434Id = 100
DE434CFID = 135185      
NetRuleHardwareDE435Type    = "DE435 DE435Adapter"
NetRuleHardwareDE435Class   = {"DE435Adapter basic"}
AdapterDE435Type   = 5  
HelpDE435Id = 110
DE435CFID = 135185      
NetRuleHardwareMULTIAType  = "MULTIA MULTIAAdapter"
NetRuleHardwareMULTIAClass = {"MULTIAAdapter basic"}
AdapterMULTIAType = 5  
HelpMULTIAId = 130
MULTIACFID = 135185    
SiaRegister0 = 12353  
SiaRegister1 = 0      
SiaRegister2 = 6      
NetRuleHardwareDE425Type    = "DE425 DE425Adapter"
NetRuleHardwareDE425Class   = {"DE425Adapter basic"}
AdapterDE425Type   = 2  
DE425CFID = 135185      
DE425_1BYTE = 1346544400  
EISA_MASK   = 4043309055
NetRuleHardwareDE450Type  = "DE450 DE450Adapter"
NetRuleHardwareDE450Class = {"DE450Adapter basic"}
AdapterDE450Type = 5  
HelpDE450Id = 20
DE450CFID = 1314833    
NetRuleHardwareDE500Type  = "DE500 DE500Adapter"
NetRuleHardwareDE500Class = {"DE500Adapter basic"}
AdapterDE500Type = 5   
HelpDE500Id = 30
DE500CFID = 593937     
NetRuleHardwareBindForm = " yes yes container"
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle            = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DriverPath      = $(!STF_NTPATH)\drivers
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        ifstr(i) $($1) == ""
           goto returnoptions
        endif
        set PlatformList = ^(PlatformsSupported, 1)
        Ifcontains(i) $($1) in $(PlatformList)
           goto returnoptions
        else
           set Status = STATUS_NOTSUPPORTED
           goto finish_ReturnOptions
        endif
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    set NetRuleSoftwareBindable = $($R1)
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = "OK"
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(Function$(Option)Title)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
          Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
               Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                     goto ShellCodeError
               endif
               set Error = $($R0)
               set from = end
               set to = end
               goto nonfatalinfo
          else-ifstr(i) $(Option) == "DE425"
               Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_HARDWARE
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                     goto ShellCodeError
               endif
               set Error = $($R0)
               set from = end
               set to = end
               goto nonfatalinfo
          else
               set StartLabel = configureadapter
          endif
   else
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        CloseRegKey $(KeyProduct)
        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           goto end
        else
           Shell $(UtilityInf), CardExistedDlg
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
              goto ShellCodeError
           endif
           ifstr(i) $($R1) != "OK"
               set CommonStatus = STATUS_USERCANCEL
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    Endif
    ifstr(i) $(DoCopy) == "YES"
        Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
        Ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Goto ShellCodeError
        Else-Ifstr(i) $($R0) == STATUS_FAILED
            Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
            endif
            set Error = $($R0)
               Goto fatal
        Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
               Goto successful
        Endif
        Set SrcDir = $($R1)
        install "Install-Hlp"
    endif
    Goto installproduct
configureadapter = +
   Ifstr(i) $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            Set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
           Goto fatalregistry
        Endif
    Endif
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Goto fatalregistry
    endif
    set KeyParameters = $($R2)
    CloseRegKey $($R1)
    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        goto fatalregistry
    endif
    set OldVersionExisted = $(TRUE)
    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}
    EnumRegValue $(KeyParameters) ValueList
    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        Ifstr(i) $(ValueName) == "ConnectionType"
            set ConnectionIndex = $(ValueData)
        endif
    EndForListDo
    set ConnectionValue = *($(ConnectionList), ~($(ConnectionValues),$(ConnectionIndex)))
    ifstr(i) $(ConnectionValue) == ""
        set ConnectionValue = *($(ConnectionList), 2)
    endif
adapteroptions = +
    ifstr(i) $(Option) != "DE425"
        set from = adapteroptions
        read-syms FileDependentDlg$(!STF_LANGUAGE)
        SetHelpFile $(!STF_WINDOWSSYSPATH)"\"$(OptionHelpFile) $(MinHelpId) $(MaxHelpId) $(Help$(Option)Id)
        ui start "InputDlg"
        ifstr(i) $(DLGEVENT) == "CONTINUE"
           set ConnectionIndex = $(Combo1Out)
           ui pop 1
        else-ifstr(i) $(DLGEVENT) == "BACK"
           set CommonStatus = STATUS_USERCANCEL
           ui pop 1
           goto end
        else
           ui pop 1
           goto end
        endif
        set ConnectionValue = *($(ConnectionValues), ~($(ConnectionList),$(ConnectionIndex)))
        ifstr(i) $(!NTN_InstallMode) == configure
           goto updateparameters
        endif
    endif
installproduct =+
    StartWait
    ifstr(i) $(Option) == "DE425"
        Shell $(UtilityInf), EISAFindBus, $($(Option)_1BYTE),$(EISA_MASK)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
             goto ShellCodeError
        endif
        ifstr $($R0) != "NO_ERROR"
             set Error = $($R0)
             goto fatal
        endif
        ifstr(i) $($R1) == {}
             set Error = $(CANNOT_FIND_ANY_CARD)
             set CommonStatus = USER_CANCEL
             set from = end
             goto nonfatal
        endif
        set AdapterList = $($R1)
    else
        set-div DeviceID = $($(Option)CFID) 65336
        Shell $(UtilityInf), GetPCIInformation, $(VendorID) $(DeviceID)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
             goto ShellCodeError
        endif
        ifstr(i) $($R0) == {}
             set Error = $(CANNOT_FIND_ANY_CARD)
             set CommonStatus = USER_CANCEL
             set from = end
             goto nonfatal
        endif
        set AdapterList = $($R0)
    endif
    ifint $(OldVersionExisted) == $(FALSE)
        Ifstr(i) $(DoCopy) == "YES"
           Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
           Ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Goto ShellCodeError
           Else-Ifstr(i) $($R0) == STATUS_FAILED
               Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
               endif
               set Error = $($R0)
               Goto fatal
           Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
               Goto successful
           Endif
           Set SrcDir = $($R1)
        Endif
        install "Install-Option"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
        endif
        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), +
            $(ProductSoftwareName), +
            $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
            $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
            $(NetEventDLL)
        Set OEM_ABANDON_SOFTWARE = TRUE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            CloseRegKey $($R4)
            CloseRegKey $($R5)
            goto fatalregistry
        endif
        Set SoftProductKey      = $($R1)
        Set SoftNetRuleKey      = $($R2)
        Set SoftServiceKey      = $($R3)
        Set SoftParameterKey    = $($R4)
        Set SoftLinkageKey      = $($R5)
        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
        Shell  $(UtilityInf), AddValueList, $(SoftProductKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            CloseRegKey $(SoftProductKey)
            CloseRegKey $(SoftNetRuleKey)
            CloseRegKey $(SoftServiceKey)
            CloseRegKey $(SoftParameterKey)
            CloseRegKey $(SoftLinkageKey)
            goto fatalregistry
        endif
        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                            {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                            {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareSWBindable)}, +
                            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
        Shell  $(UtilityInf), AddValueList, $(SoftNetRuleKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        CloseRegKey $(SoftProductKey)
        CloseRegKey $(SoftNetRuleKey)
        CloseRegKey $(SoftServiceKey)
        CloseRegKey $(SoftParameterKey)
        CloseRegKey $(SoftLinkageKey)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            goto fatalregistry
        endif
    endif
    ForListDo $(AdapterList)
        set BusNum = *($($),1)
        set DeviceNum = *($($),2)
        set FunctionNum = *($($),3)
        ifstr(i) $(Option) == "DE425"
                Shell $(UtilityInf), IsNetCardAlreadyInstalled, $(BusNum), +
                    $(DeviceNum), $(ProductHardware$(Option)Description), $(ProductHardwareName) "YES"
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
                endif
                ifstr $($R0) != "NO_ERROR"
                    set Error = $($R0)
                    goto fatal
                endif
                ifstr(i) $($R1) != "YES"
                        Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)
                        ifint $($R4) != -1
                            Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), +
                                $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
                        endif
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                            goto ShellCodeError
                        endif
                        set RegistryErrorIndex = $($R0)
                        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
                            EndWait
                            CloseRegKey $($R1)
                            CloseRegKey $($R2)
                            CloseRegKey $($R3)
                            goto fatalregistry
                        endif
                        Set HardNetCardKey      = $($R1)
                        Set HardNetRuleKey      = $($R2)
                        Set HardParameterKey    = $($R3)
                        set AdapterNumber = $($R4)
                        set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                                           {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                                           {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                                           {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductDE425OpSupport)},+
                                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
                        Shell  $(UtilityInf), AddValueList, $(HardNetCardKey), $(NewValueList)
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                            goto ShellCodeError
                        endif
                        set BusTypeNum = 2
                        set NewValueList = {{AdapterType,$(NoTitle),$(!REG_VT_DWORD),$(Adapter$(Option)Type)},+
                                        {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
                                        {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
                                        {BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNum)},+
                                        {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(DeviceNum)},+
                                        {AdapterCFID,$(NoTitle),$(!REG_VT_DWORD),$($(Option)CFID)}}
                        Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                            goto ShellCodeError
                        endif
                        set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
                        set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
                        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardware$(Option)Type)},+
                                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardware$(Option)Class)}, +
                                            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
                        Shell  $(UtilityInf), AddValueList, $(HardNetRuleKey), $(NewValueList)
                        ifint $($ShellCode) != $(!SHELL_CODE_OK)
                            goto ShellCodeError
                        endif
                        CloseRegKey $(HardNetCardKey)
                        CloseRegKey $(HardNetRuleKey)
                        CloseRegKey $(HardParameterKey)
                endif
        else
            Shell $(UtilityInf), IsNetCardAlreadyInstalled, $(BusNum), +
                $(DeviceNum), $(ProductHardware$(Option)Description), $(ProductHardwareName) "YES"
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                goto ShellCodeError
            endif
            ifstr $($R0) != "NO_ERROR"
                set Error = $($R0)
                goto fatal
            endif
            ifstr(i) $($R1) != "YES"
               Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)
               ifint $($R4) != -1
                    Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
               endif
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
               endif
               set RegistryErrorIndex = $($R0)
               Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
                    EndWait
                    CloseRegKey $($R1)
                    CloseRegKey $($R2)
                    CloseRegKey $($R3)
                    goto fatalregistry
               endif
               read-syms FileDependentDlg$(!STF_LANGUAGE)
               SetHelpFile $(!STF_WINDOWSSYSPATH)"\"$(OptionHelpFile) $(MinHelpId) $(MaxHelpId) $(Help$(Option)Id)
               ui start "InputDlg"
               ifstr(i) $(DLGEVENT) == "CONTINUE"
                  set ConnectionIndex = $(Combo1Out)
                  ui pop 1
               else-ifstr(i) $(DLGEVENT) == "BACK"
                  set CommonStatus = STATUS_USERCANCEL
                  ui pop 1
                  goto end
               else
                  ui pop 1
                  goto end
               endif
               set ConnectionValue = *($(ConnectionValues), ~($(ConnectionList),$(ConnectionIndex)))
               Set HardNetCardKey      = $($R1)
               Set HardNetRuleKey      = $($R2)
               Set HardParameterKey    = $($R3)
               set AdapterNumber = $($R4)
               set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                                   {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                                   {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                                   {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                                   {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                                   {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)},+
                                   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
               Shell  $(UtilityInf), AddValueList, $(HardNetCardKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
               endif
               set BusTypeNum = 5
               set NewValueList = {{AdapterType,$(NoTitle),$(!REG_VT_DWORD),$(Adapter$(Option)Type)},+
                                   {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
                                   {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
                                   {AdapterCFID,$(NoTitle),$(!REG_VT_DWORD),$($(Option)CFID)}}
               Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
               endif
            ifint $($(Option)CFID) == $(DC21041CFID) 
               set NewValueList = {{SnoozeMode,$(NoTitle),$(!REG_VT_DWORD),0}}
               Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   goto ShellCodeError
               endif
            endif
            ifint $($(Option)CFID) == $(DC21142CFID) 
                set NewValueList = {{SnoozeMode,$(NoTitle),$(!REG_VT_DWORD),0}}
                Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
                endif
            endif
            ifint $($(Option)CFID) == $(DE450CFID) 
               set NewValueList = {{SnoozeMode,$(NoTitle),$(!REG_VT_DWORD),0}}
               Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   goto ShellCodeError
               endif
            endif
            ifint $($(Option)CFID) == $(DC21140CFID) 
                set NewValueList = {{StoreAndForward,$(NoTitle),$(!REG_VT_DWORD),$(StoreAndForward)},+
                                    {TransmitThreshold100,$(NoTitle),$(!REG_VT_DWORD),$(TxmThreshold100)},+
                                    {SnoozeMode,$(NoTitle),$(!REG_VT_DWORD),0}}
                Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
                endif
            endif
               ifstr(i) $(Option) == "MULTIA"
                    set NewValueList = {{ExternalSia,$(NoTitle),$(!REG_VT_DWORD),1},+
                                        {SiaRegister0,$(NoTitle),$(!REG_VT_DWORD),$(SiaRegister0)},+
                                        {SiaRegister1,$(NoTitle),$(!REG_VT_DWORD),$(SiaRegister1)},+
                                        {SiaRegister2,$(NoTitle),$(!REG_VT_DWORD),$(SiaRegister2)}}
                    Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
                    ifint $($ShellCode) != $(!SHELL_CODE_OK)
                         goto ShellCodeError
                    endif
               endif
               set NewValueList = {{ConnectionType,$(NoTitle),$(!REG_VT_DWORD),$(ConnectionValue)}}
               Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
               endif
               set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
               set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
               set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardware$(Option)Type)},+
                                   {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                                   {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardware$(Option)Class)}, +
                                   {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
               Shell  $(UtilityInf), AddValueList, $(HardNetRuleKey), $(NewValueList)
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                    goto ShellCodeError
               endif
               CloseRegKey $(HardNetCardKey)
               CloseRegKey $(HardNetRuleKey)
               set NewValueList = {{BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNum)},+
                                   {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(DeviceNum)},+
                                   {FunctionNumber,$(NoTitle),$(!REG_VT_DWORD),$(FunctionNum)}}
               Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
               CloseRegKey $(HardParameterKey)
            endif       
        endif
    EndForListDo
    EndWait
    goto successful
updateparameters =+
    set HardParameterKey    = $($R3)
    set NewValueList = {{ConnectionType,$(NoTitle),$(!REG_VT_DWORD),$(ConnectionValue)}}
   Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
   ifint $($ShellCode) != $(!SHELL_CODE_OK)
     goto ShellCodeError
   endif
   CloseRegKey $(KeyParameters)
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif
    goto end
UpgradeSoftware = +
     OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
     Ifstr $(KeyProduct) != $(KeyNull)
           Shell $(UtilityInf), GetInfFileNameFromRegistry, $(KeyProduct)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error"
               goto ShellCodeError
           endif
           set !UG_Filename = $($R0)
           install "Install-Update"
           ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
               goto fatal
           endif
           SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
           SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
           CloseRegKey $(KeyProduct)
     else
           goto fatalregistry
     endif
    ifstr(i) $(Option) == "DE425"    
        set OpSupport = $(ProductDE425OpSupport)
    else
        set OpSupport = $(ProductOpSupport)
    endif
    set iSearch = 1
nextnetcard = +
    Shell $(UtilityInf), FindNextNetworkCard, $(ProductHardwareName), $(iSearch)
    set KeyNetcard = $($R0)
    set iSearch = $($R1)
    Debug-Output "OemNadEp.Inf: FindNextNetworkCard "$(KeyNetcard)","$(iSearch)
    Ifstr $(KeyNetcard) != $(KeyNull)
        Debug-Output "OemNadEp.Inf: Setting OperationsSupport value"
        SetRegValue $(KeyNetcard) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(OpSupport)}
        CloseRegKey $(KeyNetcard)
        goto nextnetcard
    Endif
     goto end
successful = +
    goto end
abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $($)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    EndForListDo
    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), FALSE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto abandon
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    Exit
[Install-Hlp]
   set STF_VITAL = ""
   AddSectionFilesToCopyList Files-Hlp $(SrcDir) $(!STF_WINDOWSSYSPATH)
   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList
   Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-Hlp $(SrcDir) $(!STF_WINDOWSSYSPATH)
   AddSectionFilesToCopyList Files-Inf $(SrcDir) $(!STF_WINDOWSSYSPATH)
   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList
   exit
[Source Media Descriptions]
   1 = "Windows NT Server CD-ROM" , TAGFILE = cdrom_s.45
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = Alpha
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
[Files-DC21040]
1,DC21X4.SYS , SIZE=999
[Files-DC21041]
1,DC21X4.SYS , SIZE=999
[Files-DC21140]
1,DC21X4.SYS , SIZE=999
[Files-DC21142]
1,DC21X4.SYS , SIZE=999
[Files-DE425]
1,DC21X4.SYS , SIZE=999
[Files-DE434]
1,DC21X4.SYS , SIZE=999
[Files-DE435]
1,DC21X4.SYS , SIZE=999
[Files-DE450]
1,DC21X4.SYS , SIZE=999
[Files-DE500]
1,DC21X4.SYS , SIZE=999
[Files-Hlp]
1,DC21X4.HLP , SIZE=999
[Files-MULTIA]
1,DC21X4.SYS , SIZE=999
[LanguagesSupported]
    ENG
[OptionsTextENG]
    DC21040  = "DEC PCI Ethernet DECchip 21040"
    DC21041  = "DEC PCI Ethernet DECchip 21041"
    DC21140  = "DEC PCI Fast Ethernet DECchip 21140"
    DC21142  = "DEC PCI Fast Ethernet DECchip 21142"
    DE434    = "DEC DE434 EtherWORKS Turbo PCI TP Adapter"
    DE435    = "DEC DE435 EtherWORKS Turbo PCI Adapter"
    MULTIA   = "DEC multia's Ethernet Controller"
    DE425    = "DEC DE425 EtherWORKS Turbo EISA Adapter"
    DE450    = "DEC DE450 EtherWORKS Turbo PCI Adapter"
    DE500    = "DEC DE500 Fast Ethernet PCI Adapter"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
ProductSoftwareDescription = "DEC DC21x4 Driver"
FunctionDC21040Title = "DEC DECchip 21040 Based Adapter Setup"
ProductHardwareDC21040Description = "DEC PCI Ethernet DECchip 21040"
ProductHardwareDC21040Title = "DEC PCI Ethernet DECchip 21040"
FunctionDC21041Title = "DEC DECchip 21041 Based Adapter Setup"
ProductHardwareDC21041Description = "DEC PCI Ethernet DECchip 21041"
ProductHardwareDC21041Title = "DEC PCI Ethernet DECchip 21041"
FunctionDC21140Title = "DEC DECchip 21140 Based Adapter Setup"
ProductHardwareDC21140Description = "DEC PCI Fast Ethernet DECchip 21140"
ProductHardwareDC21140Title = "DEC PCI Fast Ethernet DECchip 21140"
FunctionDC21142Title = "DEC DECchip 21142 Based Adapter Setup"
ProductHardwareDC21142Title = "DEC PCI Ethernet DC21142"
ProductHardwareDC21142Description = "DEC PCI Fast Ethernet DECchip 21142"
FunctionDE434Title   = "DEC DE434 PCI Adapter Card Setup"
ProductHardwareDE434Description   = "DEC DE434 EtherWORKS Turbo PCI TP Adapter"
ProductHardwareDE434Title   = "DEC DE434 EtherWORKS Turbo PCI TP Adapter"
FunctionDE435Title   = "DEC DE435 PCI Adapter Card Setup"
ProductHardwareDE435Description   = "DEC DE435 EtherWORKS Turbo PCI Adapter"
ProductHardwareDE435Title   = "DEC DE435 EtherWORKS Turbo PCI Adapter"
FunctionMULTIATitle = "DEC multia's Ethernet Controller Setup"
ProductHardwareMULTIADescription = "DEC multia's Ethernet Controller"
ProductHardwareMULTIATitle = "DEC multia's Ethernet Controller"
FunctionDE425Title   = "DEC DE425 EISA Adapter Card Setup"
ProductHardwareDE425Description   = "DEC DE425 EtherWORKS Turbo EISA Adapter"
ProductHardwareDE425Title   = "DEC DE425 EtherWORKS Turbo EISA Adapter"
FunctionDE450Title   = "DEC DE450 PCI Adapter Card Setup"
ProductHardwareDE450Description   = "DEC DE450 EtherWORKS Turbo PCI Adapter"
ProductHardwareDE450Title   = "DEC DE450 EtherWORKS Turbo PCI Adapter"
FunctionDE500Title   = "DEC DE500 PCI Adapter Card Setup"
ProductHardwareDE500Description   = "DEC DE500 Fast Ethernet PCI Adapter"
ProductHardwareDE500Title   = "DEC DE500 Fast Ethernet PCI Adapter"
ConnectionList  = ^(ConnectionChoices$(Option), 1)
ConnectionValues = ^(ConnectionChoices$(Option), 2)
NoList  = ^(NoChoices, 1)
NoValues = ^(NoChoices, 2)
ShellCodeErrorTitle     = "Error: "$(Function$(Option)Title)
ShellCodeErrorText      = "Shell Code Error."
CANNOT_FIND_ANY_CARD    = "Network card is not present in the system"
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[FileDependentDlgENG]
DlgText = "Choose the proper cable type for the "+
          "network adapter. Select [Help] for a detailed "+
          "description of the available options of the list."
Combo1Label = "&Connection Type:"
DlgTemplate = "ADAP_PROTO_COMBO"
DlgType = "Combination"
Caption = $(Function$(Option)Title)
Combo1List = $(ConnectionList)
Combo1Out  = $(ConnectionValue)
ComboListItemsIn  = {Combo1List}
ComboListItemsOut = {Combo1Out}
EditTextLim = ""
CBOptionsGreyed = {}
MinHelpId = 10
MaxHelpId = 1130
HelpContext = $(Help$(Option)Id)
[ConnectionChoicesDC21040]
    Connect_0 = "AutoDetect", 0
    Connect_1 = "10BaseT (Twisted_Pair) ", 2
    Connect_2 = "10BaseT Full_Duplex ", 3
    Connect_3 = "10BaseT No_Link_Test", 4
    Connect_4 = "10Base2 (BNC)", 1
    Connect_5 = "10Base5 (AUI)", 5
[ConnectionChoicesDC21041]
    Connect_0 = "AutoSense", 0
    Connect_1 = "AutoSense No_Nway", 6
    Connect_2 = "10BaseT (Twisted_Pair) ", 2
    Connect_3 = "10BaseT Full_Duplex ", 3
    Connect_5 = "10BaseT No_Link_Test", 4
    Connect_6 = "10Base2 (BNC)", 1
    Connect_7 = "10Base5 (AUI)", 5
[ConnectionChoicesDC21140]
    Connect_0 = "AutoSense", 0
    Connect_1 = "AutoSense No_Nway", 6
    Connect_2 = "100BaseTx", 8
    Connect_3 = "100BaseTx Full_Duplex", 9
    Connect_4 = "100BaseT4", 10
    Connect_5 = "100BaseFx", 11
    Connect_6 = "100BaseFx Full_Duplex", 12
    Connect_7 = "10BaseT (Twisted Pair)", 2
    Connect_8 = "10BaseT Full_Duplex", 3
[ConnectionChoicesDC21142]
    Connect_0 = "AutoSense", 0
    Connect_1 = "100BaseTx", 8
    Connect_2 = "100BaseTx Full_Duplex", 9
    Connect_3 = "100BaseT4", 10
    Connect_4 = "100BaseFx", 11
    Connect_5 = "100BaseFx Full_Duplex", 12
    Connect_6 = "10BaseT (Twisted_Pair) ", 2
    Connect_7 = "10BaseT Full_Duplex", 3
    Connect_8 = "10BaseT No_Link_Test", 4
    Connect_9 = "10Base2 (BNC)", 1
    Connect_10= "10Base5 (AUI)", 5
[ConnectionChoicesMULTIA]
    Connect_0 = "AutoDetect", 0
    Connect_1 = "10BaseT (Twisted_Pair) ", 2
    Connect_2 = "10BaseT Full_Duplex ", 3
    Connect_3 = "10BaseT No_Link_Test", 4
    Connect_4 = "10Base2 (BNC)", 1
    Connect_5 = "10Base5 (AUI)", 5
[ConnectionChoicesDE434]
    Connect_0 = "10BaseT (Twisted_Pair) ", 2
    Connect_1 = "10BaseT Full_Duplex ", 3
    Connect_2 = "10BaseT No_Link_Test", 4
[ConnectionChoicesDE435]
    Connect_0 = "AutoDetect", 0
    Connect_1 = "10BaseT (Twisted_Pair) ", 2
    Connect_2 = "10BaseT Full_Duplex ", 3
    Connect_3 = "10BaseT No_Link_Test", 4
    Connect_4 = "10Base2 (BNC)", 1
    Connect_5 = "10Base5 (AUI)", 5
[ConnectionChoicesDE450]
    Connect_0 = "AutoSense", 0
    Connect_1 = "AutoSense No_Nway", 6
    Connect_2 = "10BaseT (Twisted_Pair) ", 2
    Connect_3 = "10BaseT Full_Duplex ", 3
    Connect_4 = "10BaseT No_Link_Test", 4
    Connect_5 = "10Base2 (BNC)", 1
    Connect_6 = "10Base5 (AUI)", 5
[ConnectionChoicesDE500]
    Connect_0 = "AutoSense", 0
    Connect_1 = "100BaseTx", 8
    Connect_2 = "100BaseTx Full_Duplex", 9
    Connect_3 = "10BaseT", 2
    Connect_4 = "10BaseT Full_Duplex", 3
