[Identification]
    OptionType = NetAdapter
[PlatformsSupported]
    ISA
    EISA
    "Jazz-Internal Bus"
[LanguagesSupported]
    ENG
[Options]
    UBPCXNS
    UBPCEOTPXNS
[OptionsTextENG]
    UBPCXNS     = "UB Ethernet NIUpc Adapter [XNS]"
    UBPCEOTPXNS = "UB Ethernet NIUpc/EOTP Adapter [XNS]"
[IRQChoicesUBPCXNS]
IRQ_0 = "2",2
IRQ_1 = "3",3
IRQ_2 = "4",4
IRQ_3 = "5",5
[IRQChoicesUBPCEOTPXNS]
IRQ_0 = "2",2
IRQ_1 = "3",3
IRQ_2 = "4",4
IRQ_3 = "5",5
IRQ_4 = "7",7
IRQ_5 = "12",12
[IOBaseAddrChoices]
IOBase_1  = "0x350",848
IOBase_2  = "0x358",856
IOBase_3  = "0x360",864
IOBase_4  = "0x368",872
[MemMappedWndBaseAddrChoicesUBPCXNS]
Add_1 = "0x80000",524288
Add_2 = "0x88000",557056
Add_3 = "0x90000",589824
Add_4 = "0x98000",622592
Add_5 = "0xA0000",655360
Add_6 = "0xA8000",688128
Add_7 = "0xB0000",720896
Add_8 = "0xB8000",753664
Add_9 = "0xC0000",786432
Add_10 = "0xC8000",819200
Add_11 = "0xD0000",851968
Add_12 = "0xD8000",884736
Add_13 = "0xE0000",917504
Add_14 = "0xE8000",950272
[MemMappedWndBaseAddrChoicesUBPCEOTPXNS]
Add_2 = "0xC8000",819200
Add_4 = "0xD8000",884736
[FileConstants]
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
Manufacturer    = "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductSoftwareName     = "Xns"
ProductSoftwareTitle    = "UB Monolithic Transport and Driver"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\xns.sys"
NetRuleSoftwareType     = "ubStack netBiosTransport ubXnsDriver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """XNS"" yes no container"
NetRuleSoftwareClass    = {"ubXnsDriver basic"}
NetRuleSoftwareBindable = {"ubXnsDriver ubAdapter exclusive exclusive 200"}
ProductHardwareName     = "UB"
ProductHardwareUBPCXNSTitle     = "Ungermann-Bass Ethernet NIUpc Adapter"
ProductHardwareUBPCEOTPXNSTitle         = "Ungermann-Bass Ethernet NIUpc/EOTP Adapter"
NetRuleHardwareType     = "ub ubAdapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass    = {"ubAdapter basic"}
ProductOpSupport     = 134 
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle            = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DriverPath      = $(!STF_NTPATH)\drivers
[SizeENG]
size_1 = 1, "Small"
size_2 = 2, "Big"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
FunctionTitle   = "Ungermann-Bass Adapter Card Setup"
ProductSoftwareDescription      = "UB Monolithic Transport and Driver"
ProductHardwareUBPCXNSDescription               = "Ungermann-Bass Ethernet NIUpc Adapter"
ProductHardwareUBPCEOTPXNSDescription   = "Ungermann-Bass Ethernet NIUpc/EOTP Adapter"
IRQList  = ^(IRQChoices$(Option), 1)
IRQValues = ^(IRQChoices$(Option), 2)
IOBaseAddrList = ^(IOBaseAddrChoices, 1)
IOBaseAddrValues = ^(IOBaseAddrChoices, 2)
MemMappedWndAddrList = ^(MemMappedWndBaseAddrChoices$(Option), 1)
MemMappedWndAddrValues = ^(MemMappedWndBaseAddrChoices$(Option), 2)
SizeList = ^(Size$(!NTN_LANGUAGE), 1 )
SizeValue = ^(Size$(!NTN_LNAGUAGE), 2 )
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[FileDependentDlgENG]
DlgType = "RadioCombination"
DlgTemplate = "UB"
Caption = $(FunctionTitle)
Label1 = "&Interrupt Number:"
Label2 = "I/O &Port Address:"
RadioBox = "Size:"
Radio1 = "&Small"
Radio2 = "&Big"
Label3 = "&Memory Address:"
Label4 = "&Net Number:"
Combo1List = $(IRQList)
Combo1Out  = $(IRQValue)
Combo2List = $(IOBaseAddrList)
Combo2Out  = $(IOBaseAddrValue)
Combo3List = $(MemMappedWndAddrList)
Combo3Out  = $(MemMappedWndAddrValue)
ComboListItemsIn  = {Combo1List, Combo2List, Combo3List}
ComboListItemsOut = {Combo1Out, Combo2Out, Combo3Out}
EditTextLim = ""
CBOptionsGreyed = {}
HelpContext = $(!IDH_DB_OEMNADUB_INS)
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        ifstr(i) $($1) == ""
           goto returnoptions
        endif
        set PlatformList = ^(PlatformsSupported, 1)
        Ifcontains(i) $($1) in $(PlatformList)
           goto returnoptions
        else
           set Status = STATUS_NOTSUPPORTED
           goto finish_ReturnOptions
        endif
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    Debug-Output "OEMNADXN.INF: STF_CWDDIR is: "$(!STF_CWDDIR)
    Debug-Output "OEMNADXN.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set CommonStatus = STATUS_REBOOT
        set StartLabel = configureadapter
        Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
            Debug-Output "OEMNADXN.INF: Cannot configure the driver software."
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "OEMNADXN.INF: ShellCode error: cannot get an error string."
                goto ShellCodeError
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatalinfo
        endif
    else
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE
    endif
    set IRQValue = *($(IRQList), 4)
    set IOBaseAddrValue = *($(IOBaseAddrList), 4)
    set RadioIn = {1}
    set EditTextIn = "1"
    set MemMappedWndAddrValue = *($(MemMappedWndAddrList),~($(MemMappedWndAddrValues),884736))
    set EditTextIn = "1"
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        CloseRegKey $(KeyProduct)
        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "OEMNADXN.INF: ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif
           goto end
        else
           Shell $(UtilityInf), CardExistedDlg
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "OEMNADXN.INF: ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif
           ifstr(i) $($R1) != "OK"
               set CommonStatus = STATUS_USERCANCEL
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    Endif
    Goto adapteroptions
configureadapter = +
    Ifstr(i) $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            Set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "OEMNADXN.INF: Cannot find component product key"
           Goto fatalregistry
        Endif
    Endif
    Debug-Output "OEMNADXN.INF: INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "OEMNADXN.INF: INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif
    set KeyParameters = $($R2)
    CloseRegKey $($R1)
    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "OEMNADXN.INF: Cannot find component service"
        goto fatalregistry
    endif
    set OldVersionExisted = $(TRUE )
    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}
    EnumRegValue $(KeyParameters) ValueList
    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        Ifstr(i) $(ValueName) == "InterruptNumber"
            set IRQValueIndex = $(ValueData)
        else-ifstr(i) $(ValueName) == "IoBaseAddress"
            set IOBaseAddrIndex = $(ValueData)
        else-ifstr(i) $(ValueName) == "MemoryMappedBaseAddress"
            set MemMappedWndAddrIndex = $(ValueData)
        else-ifstr(i) $(ValueName) == "NetNumber"
            set NetNumber = $(ValueData)
        else-ifstr(i) $(ValueName) == "Size"
            set Size = $(ValueData)
        else-ifstr(i) $(ValueName) == "BusType"
            set BusInterfaceType = $(ValueData)
        else-ifstr(i) $(ValueName) == "BusNumber"
            set BusNumber = $(ValueData)
        endif
    EndForListDo
    set IRQValue = *($(IRQList), ~($(IRQValues),$(IRQValueIndex)))
    ifstr(i) $(IRQValue) == ""
        set IRQValue = *($(IRQList), 4)
    endif
    ifint $(Size) == 0
        set Size = 1
    else
        set Size = 2
    endif
    set RadioIn = {$(Size)}
    set IOBaseAddrValue = *($(IOBaseAddrList), +
         ~($(IOBaseAddrValues),$(IOBaseAddrIndex)))
    ifstr(i) $(IOBaseAddrValue) == ""
        set IOBaseAddrValue = *($(IOBaseAddrList), 1)
    endif
    set MemMappedWndAddrValue = *($(MemMappedWndAddrList), +
         ~($(MemMappedWndAddrValues),$(MemMappedWndAddrIndex)))
    ifstr(i) $(MemMappedWndAddrValue) == ""
        set MemMappedWndAddrValue = *($(MemMappedWndAddrList),~($(MemMappedWndAddrValue),884736))
    endif
    ifstr(i) $(NetNumber) == $(KeyNull)
        set EditTextIn = "1"
    else
        set EditTextIn = $(NetNumber)
    endif
adapteroptions = +
    set from = adapteroptions
    read-syms FileDependentDlg$(!STF_LANGUAGE)
    ui start "InputDlg"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        set IRQValueIndex = $(Combo1Out)
        set IOBaseAddrIndex = $(Combo2Out)
        set Size = *($(RadioOut),1)
        ifint $(Size) == 1
            set Size = 0
        else
            set Size = 1
        endif
        set MemMappedWndAddrIndex = $(Combo3Out)
        set NetNumber = *($(EditTextOut), 1)
        ui pop 1
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set CommonStatus = STATUS_USERCANCEL
        Debug-Output "OEMNADXN.INF: Action: exit. Bye."
        ui pop 1
        goto end
    else
        ui pop 1
        Debug-Output "OEMNADXN.INF: Action: unknown. Bye."
        goto end
    endif
    ifstr(i) $(!STF_NCDETINFO) == {}
        Shell $(UtilityInf),GetBusTypeDialog,$(ProductHardware$(Option)Description) $(BusInterfaceType) $(BusNumber)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif
        set BusInterfaceType = $($R1)
        set BusNumber = $($R2)
    else
        set BusInterfaceType = *($(!STF_NCDETINFO),5)
        set BusNumber = *($(!STF_NCDETINFO),6)
    endif
nextstep = +
    ifint $(OldVersionExisted) == $(TRUE)
        ifstr(i) $(!NTN_InstallMode) == configure
            goto writeparameters
        endif
    endif
    StartWait
    Ifint $(OldVersionExisted) != $(FALSE)
        Goto installhardware
    Endif
    ifstr(i) $(!NTN_InstallMode) == "install"
       Ifstr(i) $(DoCopy) == "YES"
          Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
          Ifint $($ShellCode) != $(!SHELL_CODE_OK)
              Goto ShellCodeError
          Else-Ifstr(i) $($R0) == STATUS_FAILED
              Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
              ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
              endif
              set Error = $($R0)
              Goto fatal
          Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
              Goto successful
          Endif
          Set SrcDir = $($R1)
       Endif
       install "Install-Option"
       ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
       endif
    endif
    Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
        $(ProductSoftwareName), +
        $(ProductSoftwareName), +
        $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
        $(ProductSoftwareImagePath), "kernel", "TDI", {}, "",+
        $(IoLogMsgDLL), ""
    Set OEM_ABANDON_SOFTWARE = TRUE
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: ShellCode error"
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNADXN.INF: Registry error: add software components"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        CloseRegKey $($R4)
        CloseRegKey $($R5)
        goto fatalregistry
    endif
    Set SoftProductKey  = $($R1)
    Set SoftNetRuleKey  = $($R2)
    Set SoftServiceKey  = $($R3)
    Set SoftParameterKey        = $($R4)
    Set SoftLinkageKey  = $($R5)
    set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                       {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                       {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
    Shell  $(UtilityInf), AddValueList, $(SoftProductKey), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error."
            goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNADXN.INF: Registry error: add value list for software product."
            CloseRegKey $(SoftProductKey)
            CloseRegKey $(SoftNetRuleKey)
            CloseRegKey $(SoftServiceKey)
            CloseRegKey $(SoftParameterKey)
        CloseRegKey $(SoftLinkageKey)
        goto fatalregistry
    endif
    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                        {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                        {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                        {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                        {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
                        {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
    Shell  $(UtilityInf), AddValueList, $(SoftNetRuleKey), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error."
            goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Set NewValueList = {{NbProvider,$(NoTitle),$(!REG_VT_SZ),"_xns"}}
    Shell  $(UtilityInf), AddValueList, $(SoftParameterKey), $(NewValueList)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: ShellCode error."
        goto ShellCodeError
    Endif
    CloseRegKey $(SoftProductKey)
    CloseRegKey $(SoftNetRuleKey)
    CloseRegKey $(SoftServiceKey)
    CloseRegKey $(SoftParameterKey)
    CloseRegKey $(SoftLinkageKey)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNADXN.INF: Registry error: add value list."
        goto fatalregistry
    endif
installhardware =+
    Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)
    ifint $($R4) != -1
        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
    endif
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: Cannot add hardware component"
        goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNADXN.INF: Registry error: add hardware component"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        goto fatalregistry
    endif
    set KeyProduct = $($R1)
    set KeyAdapterRules = $($R2)
    set KeyParameters = $($R3)
    set AdapterNumber = $($R4)
    set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                       {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                       {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)},+
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
    Shell  $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: ShellCode error"
        goto ShellCodeError
    endif
    CloseRegKey $(KeyProduct)
    Set KeyProduct = ""
    set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
    set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
                        {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                        {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
                        {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
    Shell  $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: ShellCode error."
        goto ShellCodeError
    endif
    CloseRegKey $(KeyAdapterRules)
    Set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "OEMNADXN.INF: Registry error: add value list."
        CloseRegKey $(KeyParameters)
        goto fatalregistry
    Endif
    Debug-Output "OEMNADXN.INF: Attempt to open Netbios key..."
    OpenRegKey $(!REG_H_LOCAL) "" "SOFTWARE\Microsoft\Netbios\CurrentVersion" $(MAXIMUM_ALLOWED) NetbiosKey
    Ifstr(i) $(NetbiosKey) != $(KeyNull)
        Set NewValueList = {{Review, $(NoTitle), $(!REG_VT_DWORD), 1}}
        Shell $(UtilityInf), AddValueList, $(NetbiosKey), $(NewValueList)
        Debug-Output "OEMNADXN.INF: Netbios changed to review bindings"
        CloseRegKey $(NetbiosKey)
    Endif
writeparameters = +
    Ifstr(i) $(KeyParameters) == $(KeyNull)
        Debug-Output "OEMNADXN.INF:  *** KeyParameters is NULL at writeparameters"
    Endif
    set IRQValue = *($(IRQValues), ~($(IRQList),$(IRQValueIndex)))
    set IOBaseAddrValue = *($(IOBaseAddrValues), +
         ~($(IOBaseAddrList),$(IOBaseAddrIndex)))
    set MemMappedWndAddrValue = *($(MemMappedWndAddrValues), +
         ~($(MemMappedWndAddrList),$(MemMappedWndAddrIndex)))
    ifstr(i) $(Option) == "UBPCXNS"
        set CardType = "1"
    else-ifstr(i) $(Option) == "UBPCEOTPXNS"
        set CardType = "2"
    else
        set CardType = "3"
    endif
    set NewValueList = {+
                        {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
                        {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusInterfaceType)},+
                        {BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNumber)},+
                        {CardType,$(NoTitle),$(!REG_VT_DWORD),$(CardType)},+
                        {InterruptNumber,$(NoTitle),$(!REG_VT_DWORD),$(IRQValue)},+
                        {IoBaseAddress,$(NoTitle),$(!REG_VT_DWORD),$(IOBaseAddrValue)},+
                        {NetNumber,$(NoTitle),$(!REG_VT_DWORD),$(NetNumber)},+
                        {Size,$(NoTitle),$(!REG_VT_DWORD),$(Size)},+
                        {MemoryMappedBaseAddress,$(NoTitle),$(!REG_VT_DWORD),$(MemMappedWndAddrValue)}}
    Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNADXN.INF: ShellCode error."
        goto ShellCodeError
    endif
    Set RegistryErrorIndex = $($R0)
    CloseRegKey $(KeyParameters)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        Debug-Output "OEMNADXN.INF: Registry error: Add value list"
        goto fatalregistry
    Endif
    EndWait
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        Shell $(UtilityInf) RemoveRpcProtocol "ncacn_nb_xns"
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif
    goto end
UpgradeSoftware = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
        CloseRegKey $(KeyProduct)
    else
        goto fatalregistry
    endif
    set iSearch = 1
nextnetcard = +
    Shell $(UtilityInf), FindNextNetworkCard, $(ProductHardwareName), $(iSearch)
    set KeyNetcard = $($R0)
    set iSearch = $($R1)
    Debug-Output "OemNadEp.Inf: FindNextNetworkCard "$(KeyNetcard)","$(iSearch)
    Ifstr $(KeyNetcard) != $(KeyNull)
        Debug-Output "OemNadEp.Inf: Setting OperationsSupport value"
        SetRegValue $(KeyNetcard) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}
        CloseRegKey $(KeyNetcard)
        goto nextnetcard
    Endif
    goto end
successful = +
    goto end
abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $($)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    EndForListDo
    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), FALSE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNADXN.INF: ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = "Error: "$(FunctionTitle)
    set STF_MB_TEXT  = "Shell Code Error"
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto abandon
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
        AddSectionFilesToCopyList Files-exmb $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
    endif
    Debug-Output "OEMNADXN.INF: [Install-Option] DoCopy = "$(DoCopy)
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   AddSectionFilesToCopyList Files-exmb $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   exit
[Source Media Descriptions]
   1 = "Windows NT Server CD-ROM" , TAGFILE = cdrom_s.45
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = Mips
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
